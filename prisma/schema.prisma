datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  createOptionalDefaultValuesTypes = true
  createInputTypes                 = false // default is true
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
  role          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  UserInput UserInput?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Job {
  id          String   @id @default(uuid())
  jobTitle    String
  description String?
  postedDate  DateTime
  location    String?

  industryField      IndustryField[]
  priorityCategories PriorityCategory[]
  qualifications     Qualification[]
  Score              Score[]
}

model IndustryField {
  id    String @id @default(uuid())
  name  String @unique
  jobId String
  Job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Qualification {
  id                    String                  @id @default(uuid())
  requirement           String
  possibleCredential    PossibleCredential[]
  category              Category[]
  priority              Boolean
  jobId                 String
  Job                   Job                     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  QualificationCategory QualificationCategory[]
}

model PriorityCategory {
  id         String   @id @default(uuid())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  jobId String
  Job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model PossibleCredential {
  id              String        @id @default(uuid())
  credential      String
  qualificationId String
  Qualification   Qualification @relation(fields: [qualificationId], references: [id], onDelete: Cascade)
}

model Category {
  id                    String                  @id @default(uuid())
  name                  String
  Qualification         Qualification[]
  PriorityCategory      PriorityCategory[]
  QualificationCategory QualificationCategory[]
}

model UserInput {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  firstName  String
  middleName String?
  lastName   String
  isVerified Boolean  @default(false)

  education    Education[]
  skills       Skill[]
  experience   Experience[]
  certificates Certificate[]
  Score        Score[]
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?       @unique
}

model Education {
  id          String    @id @default(uuid())
  degree      String
  userInputId String
  userInput   UserInput @relation(fields: [userInputId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String    @id @default(uuid())
  name        String
  userInputId String
  userInput   UserInput @relation(fields: [userInputId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String    @id @default(uuid())
  description String
  userInputId String
  userInput   UserInput @relation(fields: [userInputId], references: [id], onDelete: Cascade)
}

model Certificate {
  id          String    @id @default(uuid())
  title       String
  userInputId String
  userInput   UserInput @relation(fields: [userInputId], references: [id], onDelete: Cascade)
}

model Score {
  id    String @id @default(uuid())
  score Int
  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  user        UserInput @relation(fields: [userInputId], references: [id])
  userInputId String
}

model QualificationCategory {
  id              String        @id @default(uuid())
  qualification   Qualification @relation(fields: [qualificationId], references: [id])
  category        Category      @relation(fields: [categoryId], references: [id])
  qualificationId String
  categoryId      String
}
